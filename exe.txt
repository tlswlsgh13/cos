#import
import RPi.GPIO as GPIO
import time
import feedparser

GPIO.cleanup()

#
# THE LED DRIVER CODE
#

# Define GPIO to LCD mapping
LCD_RS = 7
LCD_E  = 8
LCD_D4 = 25 
LCD_D5 = 24
LCD_D6 = 23
LCD_D7 = 18
LED_ON = 15

# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line 

# Timing constants
E_PULSE = 0.00005
E_DELAY = 0.00005

def main():
	# Main program block
	GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
	GPIO.setup(LCD_E, GPIO.OUT)  # E
	GPIO.setup(LCD_RS, GPIO.OUT) # RS
	GPIO.setup(LCD_D4, GPIO.OUT) # DB4
	GPIO.setup(LCD_D5, GPIO.OUT) # DB5
	GPIO.setup(LCD_D6, GPIO.OUT) # DB6
	GPIO.setup(LCD_D7, GPIO.OUT) # DB7
	GPIO.setup(LED_ON, GPIO.OUT) # Backlight enable

def lcd_init():
	# Initialise display
	lcd_byte(0x33,LCD_CMD)
	lcd_byte(0x32,LCD_CMD)
	lcd_byte(0x28,LCD_CMD)
	lcd_byte(0x0C,LCD_CMD)  
	lcd_byte(0x06,LCD_CMD)
	lcd_byte(0x01,LCD_CMD)  

def lcd_string(message,style):
	if style==1:
		message = message.ljust(LCD_WIDTH," ")  
	elif style==2:
		message = message.center(LCD_WIDTH," ")
	elif style==3:
		message = message.rjust(LCD_WIDTH," ")

	for i in range(LCD_WIDTH):
		lcd_byte(ord(message[i]),LCD_CHR)

def lcd_byte(bits, mode):
	GPIO.output(LCD_RS, mode) # RS

	# High bits
	GPIO.output(LCD_D4, False)
	GPIO.output(LCD_D5, False)
	GPIO.output(LCD_D6, False)
	GPIO.output(LCD_D7, False)
	if bits&0x10==0x10:
		GPIO.output(LCD_D4, True)
	if bits&0x20==0x20:
		GPIO.output(LCD_D5, True)
	if bits&0x40==0x40:
		GPIO.output(LCD_D6, True)
	if bits&0x80==0x80:
		GPIO.output(LCD_D7, True)

	# Toggle 'Enable' pin
	time.sleep(E_DELAY)    
	GPIO.output(LCD_E, True)  
	time.sleep(E_PULSE)
	GPIO.output(LCD_E, False)  
	time.sleep(E_DELAY)      

	# Low bits
	GPIO.output(LCD_D4, False)
	GPIO.output(LCD_D5, False)
	GPIO.output(LCD_D6, False)
	GPIO.output(LCD_D7, False)
	if bits&0x01==0x01:
		GPIO.output(LCD_D4, True)
	if bits&0x02==0x02:
		GPIO.output(LCD_D5, True)
	if bits&0x04==0x04:
		GPIO.output(LCD_D6, True)
	if bits&0x08==0x08:
		GPIO.output(LCD_D7, True)

	# Toggle 'Enable' pin
	time.sleep(E_DELAY)    
	GPIO.output(LCD_E, True)  
	time.sleep(E_PULSE)
	GPIO.output(LCD_E, False)  
	time.sleep(E_DELAY)   

if __name__ == '__main__':
	main()
  
#
# THE WEATHER CODE
#

lcd_init()

i = 0

try:
	while True:
		rss_link = 'http://weather.yahooapis.com/forecastrss?w=1132599&u=c'
		if i == 0 or i == 20: 
			d = feedparser.parse(rss_link)
			i = 1
		i += 1		
		
		location  = d.feed.yweather_location
		atmosphere = d.feed.yweather_atmosphere
		astronomy = d.feed.yweather_astronomy
		summary = d.entries[0].summary
		temp = summary.split("High: ")
		temp = temp[1].split(" Low: ")
		high = temp[0]
		low = temp[1].split("<br />")[0]
	
		city = location['city']
		humidity = atmosphere['humidity']
		sunrise = astronomy['sunrise']
		sunset = astronomy['sunset']
	
		lcd_byte(LCD_LINE_1, LCD_CMD)
		lcd_string(city, 2)
		lcd_byte(LCD_LINE_2, LCD_CMD)
		lcd_string("Low Temp: "+low, 2)
	
		time.sleep(4)
		
		lcd_byte(LCD_LINE_1, LCD_CMD)
		lcd_string(city, 2)
		lcd_byte(LCD_LINE_2, LCD_CMD)
		lcd_string("High Temp: "+high, 2)
		
		time.sleep(4)
		
		lcd_byte(LCD_LINE_1, LCD_CMD)
		lcd_string(city, 2)
		lcd_byte(LCD_LINE_2, LCD_CMD)
		lcd_string("Humidity: "+humidity, 2)
		
		time.sleep(4)
		
		lcd_byte(LCD_LINE_1, LCD_CMD)
		lcd_string(city, 2)
		lcd_byte(LCD_LINE_2, LCD_CMD)
		lcd_string("Sunrise: "+sunrise, 2)
	
		time.sleep(4)
		
		lcd_byte(LCD_LINE_1, LCD_CMD)
		lcd_string(city, 2)
		lcd_byte(LCD_LINE_2, LCD_CMD)
		lcd_string("Sunset: "+sunset, 2)
		
		time.sleep(4)
		
except KeyboardInterrupt:
	lcd_init()
	GPIO.cleanup()